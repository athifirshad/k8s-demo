// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"
)

const findContactsByName = `-- name: FindContactsByName :many
SELECT id, name, phone_number FROM contacts WHERE name LIKE $1
`

func (q *Queries) FindContactsByName(ctx context.Context, name string) ([]Contact, error) {
	rows, err := q.db.Query(ctx, findContactsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(&i.ID, &i.Name, &i.PhoneNumber); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findContactsByPhoneNumber = `-- name: FindContactsByPhoneNumber :many
SELECT id, name, phone_number FROM contacts WHERE phone_number LIKE $1
`

func (q *Queries) FindContactsByPhoneNumber(ctx context.Context, phoneNumber string) ([]Contact, error) {
	rows, err := q.db.Query(ctx, findContactsByPhoneNumber, phoneNumber)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(&i.ID, &i.Name, &i.PhoneNumber); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
